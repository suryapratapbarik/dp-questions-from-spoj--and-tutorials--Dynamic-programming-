/*This problem is a simple implementation of the Longest Common Subsequence(LCS) problem, which can be solved efficiently by dynamic programming algorithm.

A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. e.g., “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”.

LCS for sequences “12345” and “37435” is “345” of length 3.
LCS for sequences “abccefh” and “alcegfgh” is “acefh” of length 5.

The dp code for this problem is:
*/
#include <cstdio>
#include <cstring>
#include <iostream>
#define maxn 2005
using namespace std;
int max(int a,int b)
{
        return a>b?a:b;
}
int LongestCommonSubsequence_int(int S[],int T[],int Slength,int Tlength)
{
        /* Starting the index from 1 for our convinience (avoids handling special cases for negative indices) */
        int i,j;
        for(i=Slength;i>=1;i--)
        {
                S[i] = S[i-1];
        }
        for(i=Tlength;i>=1;i--)
        {
                T[i] = T[i-1];
        }
        int common[Slength+1][Tlength+1];
        /* common[i][j] represents length of the longest common sequence in S[1..i], T[1..j] */
        /* Recurrence:  common[i][j] = common[i-1][j-1] + 1 if S[i]==T[j]
                                     = max(common[i-1][j],common[i][j-1]) otherwise
        */
        /*common[0][i]=0, for all i because there are no characters from string S*/
        for(i=0;i<=Tlength;i++)
        {
                common[0][i]=0;
        }
        /*common[i][0]=0, for all i because there are no characters from string T*/
        for(i=0;i<=Slength;i++)
        {
                common[i][0]=0;
        }
        for(i=1;i<=Slength;i++)
        {
                for(j=1;j<=Tlength;j++)
                {
                        if(S[i] == T[j] )
                        {
                                common[i][j] = common[i-1][j-1] + 1;
                        }
                        else
                        {
                                common[i][j] = max(common[i][j-1],common[i-1][j]);
                        }

                }
        }
        return common[Slength][Tlength];

}
int main()
{
        int S[maxn],T[maxn],n,sl=0,tl,t,lcs,lcs_max;
        scanf("%d",&t);
        while(t--)
        {
            lcs_max=0;
            sl=0;
            scanf("%d",&n);
            while(n!=0)
            {
                S[sl++]=n;
                scanf("%d",&n);
            }
            while(1)
            {
                int s2[sl];
                for(int i=0;i<sl;i++) s2[i]=S[i];
                tl=0;
                scanf("%d",&n);
                if(n==0) break;
                while(n!=0)
                {   T[tl++]=n;
                    scanf("%d",&n);
                }
                lcs=LongestCommonSubsequence_int(s2,T,sl,tl);
                if(lcs>lcs_max) lcs_max=lcs;
            }
            printf("%d\n",lcs_max);
        }
        return 0;
}
